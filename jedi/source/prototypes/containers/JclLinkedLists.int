(*$JPPDEFINEMACRO JCLLINKEDLISTINT(ITEMCLASSNAME, SELFCLASSNAME, ANCESTORCLASSNAME, COLLECTIONINTERFACENAME, LISTINTERFACENAME, ITRINTERFACENAME,
  INTERFACEADDITIONAL, PRIVATEADDITIONAL, PROTECTEDADDITIONAL, PUBLICADDITIONAL, COLLECTIONFLAGS, OWNERSHIPDECLARATION, CONSTKEYWORD, PARAMETERNAME, TYPENAME, GETTERNAME, SETTERNAME)
  ITEMCLASSNAME = class
  public
    Value: TYPENAME;
    Next: ITEMCLASSNAME;
    Previous: ITEMCLASSNAME;
  end;

  SELFCLASSNAME = class(ANCESTORCLASSNAME, {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE}
    IJclIntfCloneable, IJclCloneable, IJclContainer,INTERFACEADDITIONAL
    COLLECTIONINTERFACENAME, LISTINTERFACENAME)
  private
    FStart: ITEMCLASSNAME;
    FEnd: ITEMCLASSNAME;PRIVATEADDITIONAL
  protected
    procedure AssignDataTo(Dest: TJclAbstractContainerBase); override;
    { COLLECTIONINTERFACENAME }
    function Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
    function AddAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
    procedure Clear;COLLECTIONFLAGS
    function Contains(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
    function ContainsAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
    function Equals(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
    function First: ITRINTERFACENAME;COLLECTIONFLAGS
    function IsEmpty: Boolean;COLLECTIONFLAGS
    function Last: ITRINTERFACENAME;COLLECTIONFLAGS
    function Remove(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
    function RemoveAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
    function RetainAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
    function Size: Integer;COLLECTIONFLAGS
    {$IFDEF SUPPORTS_FOR_IN}
    function GetEnumerator: ITRINTERFACENAME;COLLECTIONFLAGS
    {$ENDIF SUPPORTS_FOR_IN}
    { LISTINTERFACENAME }
    function Insert(Index: Integer; CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
    function InsertAll(Index: Integer; const ACollection: COLLECTIONINTERFACENAME): Boolean;
    function GETTERNAME(Index: Integer): TYPENAME;
    function IndexOf(CONSTKEYWORDPARAMETERNAME: TYPENAME): Integer;
    function LastIndexOf(CONSTKEYWORDPARAMETERNAME: TYPENAME): Integer;
    function Delete(Index: Integer): TYPENAME; overload;
    procedure SETTERNAME(Index: Integer; CONSTKEYWORDPARAMETERNAME: TYPENAME);
    function SubList(First, Count: Integer): LISTINTERFACENAME;
    { IJclCloneable }
    function IJclCloneable.Clone = ObjectClone;
    { IJclIntfCloneable }
    function IJclIntfCloneable.Clone = IntfClone;PROTECTEDADDITIONAL
  public
    constructor Create(const ACollection: COLLECTIONINTERFACENAMEOWNERSHIPDECLARATION);
    destructor Destroy; override;PUBLICADDITIONAL
  end;*)
(*$JPPDEFINEMACRO JCLLINKEDLISTITRINT(SELFCLASSNAME, ITRINTERFACENAME, LISTINTERFACENAME, EQUALITYCOMPARERINTERFACENAME,
  ITEMCLASSNAME, CONSTKEYWORD, PARAMETERNAME, TYPENAME, DEFAULTVALUE, GETTERNAME, SETTERNAME)
  SELFCLASSNAME = class(TJclAbstractIterator, ITRINTERFACENAME, {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE}
    IJclIntfCloneable, IJclCloneable)
  private
    FCursor: ITEMCLASSNAME;
    FStart: TItrStart;
    FOwnList: LISTINTERFACENAME;
    FEqualityComparer: EQUALITYCOMPARERINTERFACENAME;
  public
    procedure AssignPropertiesTo(Dest: TJclAbstractIterator); override;
    function CreateEmptyIterator: TJclAbstractIterator; override;
    { ITRINTERFACENAME }
    function Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
    function Equals(const AIterator: ITRINTERFACENAME): Boolean;
    function GETTERNAME: TYPENAME;
    function HasNext: Boolean;
    function HasPrevious: Boolean;
    function Insert(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
    function Next: TYPENAME;
    function NextIndex: Integer;
    function Previous: TYPENAME;
    function PreviousIndex: Integer;
    procedure Remove;
    procedure Reset;
    procedure SETTERNAME(CONSTKEYWORDPARAMETERNAME: TYPENAME);
    {$IFDEF SUPPORTS_FOR_IN}
    function MoveNext: Boolean;
    property Current: TYPENAME read GETTERNAME;
    {$ENDIF SUPPORTS_FOR_IN}
    { IJclCloneable }
    function IJclCloneable.Clone = ObjectClone;
    { IJclIntfCloneable }
    function IJclIntfCloneable.Clone = IntfClone;
  public
    constructor Create(const AOwnList: LISTINTERFACENAME; ACursor: ITEMCLASSNAME; AValid: Boolean; AStart: TItrStart);
  end;*)
